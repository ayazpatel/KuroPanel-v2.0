name: KuroPanel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: kuropanel_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite, zip, gd, curl, bcmath
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Setup test environment
      run: |
        cp .env.testing .env
        php spark key:generate

    - name: Set proper permissions
      run: |
        chmod -R 777 writable/

    - name: Run unit tests
      run: ./vendor/bin/phpunit tests/unit --testdox

    - name: Run database tests
      env:
        DB_HOST: 127.0.0.1
        DB_DATABASE: kuropanel_test
        DB_USERNAME: test_user
        DB_PASSWORD: test_password
      run: ./vendor/bin/phpunit tests/database --testdox

    - name: Run all tests with coverage
      run: ./vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-text

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: kuropanel:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        docker run --rm -d --name kuropanel-test -p 8080:80 kuropanel:test
        sleep 10
        curl -f http://localhost:8080 || exit 1
        docker stop kuropanel-test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run security audit
      run: composer audit

    - name: Run Psalm static analysis
      run: |
        if [ -f "psalm.xml" ]; then
          ./vendor/bin/psalm --output-format=github
        fi

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run PHP CS Fixer (dry run)
      run: |
        if [ -f "vendor/bin/php-cs-fixer" ]; then
          ./vendor/bin/php-cs-fixer fix --dry-run --diff
        fi

    - name: Run PHPStan
      run: |
        if [ -f "vendor/bin/phpstan" ]; then
          ./vendor/bin/phpstan analyse --memory-limit=2G
        fi

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Staging deployment would go here"
        # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Production deployment would go here"
        # Add actual deployment commands here
