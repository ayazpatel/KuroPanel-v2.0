# Production Docker Compose - ULTRA OPTIMIZED for Fast Builds
# Version: 2.0.0 - Optimized Build Performance

version: '3.8'

# ==============================================================================
# NETWORKS - Isolated and optimized
# ==============================================================================
networks:
  kuro-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==============================================================================
# VOLUMES - Persistent storage with performance tuning
# ==============================================================================
volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mysql
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  sessions_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/sessions

# ==============================================================================
# SERVICES - Production-ready with progress indicators
# ==============================================================================
services:
  # ============================================================================
  # APPLICATION SERVER - KuroPanel Main App
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile.production.optimized
      target: production
      args:
        - BUILDKIT_PROGRESS=plain
      cache_from:
        - php:8.2-alpine
        - php:8.2-apache
      cache_to:
        - type=local,dest=.docker-cache
    container_name: kuro-app-prod
    restart: unless-stopped
    environment:
      - CI_ENVIRONMENT=production
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-kuropanel}
      - DB_USER=${DB_USER:-kurouser}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - APP_KEY=${APP_KEY:-your-32-character-secret-key-here}
      - APP_URL=${APP_URL:-https://kuropanel.local}
      - MAIL_HOST=${MAIL_HOST:-smtp.gmail.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key-here}
    volumes:
      - uploads_data:/var/www/html/writable/uploads:rw
      - sessions_data:/var/www/html/writable/session:rw
      - logs_data:/var/www/html/writable/logs:rw
      - ./ssl:/var/www/html/ssl:ro
    networks:
      - kuro-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kuro.rule=Host(`${APP_DOMAIN:-kuropanel.local`)"
      - "traefik.http.services.kuro.loadbalancer.server.port=80"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # ============================================================================
  # DATABASE SERVER - MySQL 8.0 Optimized
  # ============================================================================
  mysql:
    image: mysql:8.0.34
    container_name: kuro-mysql-prod
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root_secure_123}
      - MYSQL_DATABASE=${DB_DATABASE:-kuropanel}
      - MYSQL_USER=${DB_USER:-kurouser}
      - MYSQL_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql:rw
      - ./docker/mysql/production.cnf:/etc/mysql/conf.d/production.cnf:ro
      - ./kuro.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/mysql/backup.sh:/usr/local/bin/backup.sh:ro
    networks:
      - kuro-network
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=200
      --query-cache-size=32M
      --query-cache-type=1
      --slow-query-log=1
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root_secure_123}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ============================================================================
  # CACHE SERVER - Redis 7 Optimized
  # ============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: kuro-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data:rw
      - ./docker/redis/production.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - kuro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ============================================================================
  # REVERSE PROXY - Nginx High Performance
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: kuro-nginx-prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - logs_data:/var/log/nginx:rw
    networks:
      - kuro-network
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M

  # ============================================================================
  # MONITORING - Prometheus (Optional - can be disabled)
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: kuro-prometheus-prod
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - kuro-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ============================================================================
  # DASHBOARD - Grafana (Optional - can be disabled)
  # ============================================================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: kuro-grafana-prod
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - kuro-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
